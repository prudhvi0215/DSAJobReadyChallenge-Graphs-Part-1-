void dfsPrint(int **graph,int v,int sv,priority_queue<int,vector<int>,greater<int>> *pq,bool *visited)
{
    (*pq).push(sv);
    visited[sv] = true;
    
    for(int i=0;i<v;i++)
    {
        if(i==sv){
            continue;
        }
        
        if(graph[sv][i]==1 && !visited[i]){
            dfsPrint(graph,v,i,pq,visited);
        }
    }
    return;
}


// 6) Print all connected components

void printConnectedComponents(int **graph,int v)
{
    bool *visited = new bool[v]();
    
    priority_queue<int,vector<int>,greater<int>> pq;
    
    for(int i=0;i<v;i++)
    {
        if(!visited[i]){
            dfsPrint(graph,v,i,&pq,visited);
            while(!pq.empty()){
                cout<<pq.top()<<" ";
                pq.pop();
            }
            cout<<"\n";
        }
    }
}
